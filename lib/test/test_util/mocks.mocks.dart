// Mocks generated by Mockito 5.0.16 from annotations
// in oshin_list/test/test_util/mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:oshin_list/modules/task/task_bloc/task_bloc.dart' as _i5;
import 'package:oshin_list/modules/task/task_bloc/task_state.dart' as _i2;
import 'package:task_repository/task_repository.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeTaskState_0 extends _i1.Fake implements _i2.TaskState {}

class _FakeStreamSubscription_1<T> extends _i1.Fake
    implements _i3.StreamSubscription<T> {}

class _FakeTask_2 extends _i1.Fake implements _i4.Task {}

/// A class which mocks [TaskBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskBloc extends _i1.Mock implements _i5.TaskBloc {
  MockTaskBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeTaskState_0()) as _i2.TaskState);
  @override
  _i3.Stream<_i2.TaskState> get stream => (super.noSuchMethod(
      Invocation.getter(#stream),
      returnValue: Stream<_i2.TaskState>.empty()) as _i3.Stream<_i2.TaskState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i3.Future<void> loadTasks() =>
      (super.noSuchMethod(Invocation.method(#loadTasks, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> createTask(_i4.Task? task) =>
      (super.noSuchMethod(Invocation.method(#createTask, [task]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> updateTask(int? id) =>
      (super.noSuchMethod(Invocation.method(#updateTask, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> delete(int? id) =>
      (super.noSuchMethod(Invocation.method(#delete, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i2.TaskState> listen(
          void Function(_i2.TaskState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_1<_i2.TaskState>())
          as _i3.StreamSubscription<_i2.TaskState>);
  @override
  void emit(_i2.TaskState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i6.Change<_i2.TaskState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [TaskDataProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskDataProvider extends _i1.Mock implements _i4.TaskDataProvider {
  MockTaskDataProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Task>> getAll() =>
      (super.noSuchMethod(Invocation.method(#getAll, []),
              returnValue: Future<List<_i4.Task>>.value(<_i4.Task>[]))
          as _i3.Future<List<_i4.Task>>);
  @override
  _i3.Future<void> delete(int? id) =>
      (super.noSuchMethod(Invocation.method(#delete, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<_i4.Task> create(_i4.Task? task) =>
      (super.noSuchMethod(Invocation.method(#create, [task]),
              returnValue: Future<_i4.Task>.value(_FakeTask_2()))
          as _i3.Future<_i4.Task>);
  @override
  String toString() => super.toString();
}
